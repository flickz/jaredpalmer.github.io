// STRIP UNIT
// It strips the unit of measure and returns it
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}
// CONVERT TO REM
@function convert-to-rem($value, $base-value: $rem-base) {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;

  @if ($value == 0) {
    $value: 0;
  }
  // Turn 0rem into 0
  @return $value;
}
// REM CALC
// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:
//
//   rem-calc(10 20 30px 40);
//
// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
//
//   rem-calc((10, 20, 30, 40px));
//
// Optionally call with a different base (eg: 8px) to calculate rem.
//
//   rem-calc(16px 32px 48px, 8px);
//
// If you require to comma separate your list
//
//   rem-calc((16px, 32px, 48), 8px);
@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);
  @if $max == 1 {
    @return convert-to-rem(nth($values, 1), $base-value);
  }
  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}
// OLD EM CALC
// Deprecated: We'll drop support for this in 5.1.0, use rem-calc()
@function emCalc($values) {
  @return rem-calc($values);
}
// OLD EM CALC
// Deprecated: We'll drop support for this in 5.1.0, use rem-calc()
@function em-calc($values) {
  @return rem-calc($values);
}

@mixin media-query($media-query) {
  @if $media-query == small-only {
    @media only screen and (max-width: $medium - 1) {
      @content;
    }
  }
  @if $media-query == small {
    @media only screen and (min-width: $small) {
      @content;
    }
  }
  @if $media-query == medium {
    @media only screen and (min-width: $medium) {
      @content;
    }
  }
  @if $media-query == medium-only {
    @media only screen and (min-width: $medium) and (max-width: $wide - 1) {
      @content;
    }
  }
  @if $media-query == large {
    @media only screen and (min-width: $large) {
      @content;
    }
  }
}

@mixin small-only {
  @include media-query(small-only) {
    @content
  }
  ;
}

@mixin small {
  @include media-query(small) {
    @content
  }
  ;
}

@mixin medium {
  @include media-query(medium) {
    @content
  }
  ;
}

@mixin medium-only {
  @include media-query(medium-only) {
    @content
  }
  ;
}

@mixin large {
  @include media-query(large) {
    @content
  }
  ;
}

@mixin reset-box {
  padding: 0;
  margin: 0;
}

@mixin clearfix {

  &:before {
    content: '';
    display: table;
  }

  &:after {
    clear: both;
    content: '';
    display: table;
  }

}
.text-center{
  text-align: center;
}
